/* ol {
    background-color: rgb(0, 39, 214);
} */

img{
    width: auto;
    height: 500px;
    display: flex;
    flex-shrink: 1;
    flex-basis: 0
    ;
}

.images {
    max-width: 100px;
    display: flex;

} 

.ordered-list, .unordered {
    display: flex;
    color: blanchedalmond;
    background-color: blue;
    /* flex: 1; */
    flex-direction: column;
    justify-content: space-between;
    /* aligns items across the main axis */
    /* justufy-content is for horizontal plane called main axis*/
    align-items: center;
    /* align-items aligns content vertically, called cross axis */
    gap: 10px;
    /* here gap of 10 px between each flex item because justify-content: column, else gap is usually given for row items by default unless flex direction is not specified */

}
/* here we are making use of two seperate classes, so we have to make use of comma","*/

#ulforu{
    color: rgb(189, 116, 7);
    background-color: rgb(63, 0, 145);
}

.ancestor .contents {
    /* some declarations */
    color: #000;
  }
  /* so up above here we have made use of descendant combinator
  this goes to show the syntax difference between the existing way of including two or more 
  selectors, sepeating them with a comma , and for descendant combinator we make use of
  blank single space */
  /* we are using nested classes or descendant classes for that matter here */


.subsection.header {
  color: red;
}
  
.subsection#preview {
    color: blue;
} 
/* id gets higher precendence */
/* rule1 */
.subsection {
    color: blue;
  }
/* rule2 */
.main .list {
    color: #d0df00;
}
/* rule 2 is more specific becasue it has more class selectors */
#anotherid {
    color: #001f86;
}

/* rule 1 
#subsection {
    color: blue;
  }
  
  /* rule 2 
  .main .list {
    color: red;
  } 

  here rule 1 gets higher precedence

  #subsection {
  background-color: yellow;
  color: blue;
}

/* rule 2 
.main #subsection {
    color: red;
   }

   here rule 2 gets higher precedence because rule 1 has only one ID selector but rule 2 has a id and class
   selector
  */

  #parent {
    color: red;
  }
  
  .child {
    color: blue;
  }

  /* here child selector gets higher precedence over parent being a id selector,
  because id becomes a inherited selector */

  /* additionally whichever class selector was last used gets higher precedence over it's previous clsses,
  this is done because the latest selector is considered as a proper version */